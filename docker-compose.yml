services:
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./api/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  api:
    image: node:20-alpine
    working_dir: /app
    command: sh -c "npm install && npm run start:dev"
    environment:
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_USER: pig
      DATABASE_PASSWORD: bidzina
      DATABASE_NAME: animal_farm
    ports:
      - "3000:3000"
    volumes:
      - ./api:/app
      - api_node_modules:/app/node_modules
    profiles: ["dev"]
    depends_on:
      postgres:
        condition: service_healthy

  migrations:
    image: node:20-alpine
    working_dir: /app
    command: sh -c "npm install && npm run migration:run"
    environment:
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_USER: ${DB_USER:-pig}
      DATABASE_PASSWORD: ${DB_PASSWORD:-bidzina}
      DATABASE_NAME: ${DB_NAME:-animal_farm}
    volumes:
      - ./api:/app
      - api_node_modules:/app/node_modules
    profiles: ["prod"]
    depends_on:
      postgres:
        condition: service_healthy

  api-prod:
    build:
      context: ./api
      dockerfile: ../docker/Dockerfile.api
    environment:
      NODE_ENV: production
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_USER: ${DB_USER:-pig}
      DATABASE_PASSWORD: ${DB_PASSWORD:-bidzina}
      DATABASE_NAME: ${DB_NAME:-animal_farm}
    ports:
      - "3000:3000"
    profiles: ["prod"]
    depends_on:
      migrations:
        condition: service_completed_successfully

  frontend:
    image: node:20-alpine
    working_dir: /app
    command: sh -c "npm install && npm run start:docker"
    ports:
      - "4200:4200"
    volumes:
      - ./frontend:/app
      - frontend_node_modules:/app/node_modules
    profiles: ["dev"]
    depends_on:
      - api

  frontend-prod:
    build:
      context: .
      dockerfile: docker/Dockerfile.frontend
    ports:
      - "80:80"
    profiles: ["prod"]
    depends_on:
      - api-prod

volumes:
  postgres_data:
  api_node_modules:
  frontend_node_modules:
